name: Log Updater

on:
  pull_request:
    types: [opened]

jobs:
  update-log:
    runs-on: ubuntu-latest
    name: Update LOGS.md
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract issue number from PR body
        id: extract_issue
        uses: actions/github-script@v7
        with:
          script: |
            const prBody = context.payload.pull_request.body || '';
            const prTitle = context.payload.pull_request.title || '';
            console.log('PR Body:', prBody);
            console.log('PR Title:', prTitle);
            
            // Look for issue references in various formats in both title and body
            const issuePatterns = [
              /(?:fixes|closes|resolves|addresses)\s+#(\d+)/i,
              /(?:issue|ref|see)\s+#(\d+)/i,
              /(?:for|from)\s+issue\s+#(\d+)/i,
              /#(\d+)/
            ];
            
            let issueNumber = null;
            const searchText = prTitle + ' ' + prBody;
            
            for (const pattern of issuePatterns) {
              const match = searchText.match(pattern);
              if (match) {
                issueNumber = match[1];
                console.log('Found issue number with pattern:', pattern.toString());
                break;
              }
            }
            
            console.log('Extracted issue number:', issueNumber);
            return issueNumber;
      
      - name: Check issue assignee
        id: check_assignee
        if: steps.extract_issue.outputs.result != 'null'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = ${{ steps.extract_issue.outputs.result }};
            if (!issueNumber) {
              console.log('No issue number found');
              return false;
            }
            
            try {
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
              
              const assignees = issue.data.assignees || [];
              const isAssignedToFounder = assignees.some(assignee => 
                assignee.login === 'pcwilliams1258'
              );
              
              console.log('Issue assignees:', assignees.map(a => a.login));
              console.log('Is assigned to pcwilliams1258:', isAssignedToFounder);
              
              return isAssignedToFounder;
            } catch (error) {
              console.log('Error fetching issue:', error.message);
              return false;
            }
      
      - name: Update LOGS.md
        if: steps.check_assignee.outputs.result == 'true'
        run: |
          ISSUE_NUMBER="${{ steps.extract_issue.outputs.result }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          ISSUE_URL="https://github.com/${{ github.repository }}/issues/${ISSUE_NUMBER}"
          
          # Create the new entry following the exact template format
          cat >> docs/LOGS.md << EOF
          
          ## Issue #${ISSUE_NUMBER} Entry
          
          - **GitHub Issue:** [#${ISSUE_NUMBER}](${ISSUE_URL})
          - **Pull Request:** #${PR_NUMBER}
          
          **Final Prompt Chain:**
          1. **Prompt 1:** (The initial prompt used to generate the core code for the feature.)
          2. **Prompt 2 (Refinement):** (Any follow-up prompts used to refactor, add error handling, improve documentation, etc.)
          
          **AI Explanation Summary:**  
          (To be filled by founder after using \`/explain\` on the final code. A 1-2 sentence summary of the AI's explanation of the code's logic and purpose.)
          
          **Validation Checklist:**
          - [ ] Instructed Copilot to generate pytest unit tests based on the acceptance criteria in the issue.
          - [ ] (Add specific test cases that were validated, e.g., Test case 1: Positive correlation.)
          - [ ] Executed pytest in the terminal.
          - [ ] All tests passed successfully before committing the code.
          
          ---
          EOF
          
          echo "Added new entry for Issue #${ISSUE_NUMBER} and PR #${PR_NUMBER}"
      
      - name: Commit changes
        if: steps.check_assignee.outputs.result == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/LOGS.md
          git commit -m "Auto-update LOGS.md for Issue #${{ steps.extract_issue.outputs.result }} (PR #${{ github.event.pull_request.number }})"
          git push