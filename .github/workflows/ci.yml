name: Continuous Integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Check code formatting with black
        run: |
          black --check --diff .
      
      - name: Check import sorting with isort
        run: |
          isort --check-only --diff .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pyyaml
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Install the project itself in editable mode
          pip install -e .
      
      - name: Run tests with pytest
        run: |
          python -m pytest tests/ -v --tb=short

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install security scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run bandit security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . || true
      
      - name: Check for known security vulnerabilities
        run: |
          if [ -f requirements.txt ]; then
            safety check -r requirements.txt || true
          fi

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Audit dependencies for vulnerabilities
        run: |
          if [ -f requirements.txt ]; then
            pip-audit -r requirements.txt || true
          fi

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for source code changes
        id: check_source
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            SOURCE_CHANGED=$(git diff --name-only ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }} | grep '^src/.*\.py$' || true)
          else
            SOURCE_CHANGED=$(git diff --name-only HEAD~1 HEAD | grep '^src/.*\.py$' || true)
          fi
          
          if [ -n "$SOURCE_CHANGED" ]; then
            echo "source_changed=true" >> $GITHUB_OUTPUT
            echo "Changed source files:"
            echo "$SOURCE_CHANGED"
          else
            echo "source_changed=false" >> $GITHUB_OUTPUT
            echo "No source code changes detected"
          fi
      
      - name: Check for documentation updates
        id: check_docs
        if: steps.check_source.outputs.source_changed == 'true'
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            DOCS_CHANGED=$(git diff --name-only ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }} | grep '^docs/' || true)
          else
            DOCS_CHANGED=$(git diff --name-only HEAD~1 HEAD | grep '^docs/' || true)
          fi
          
          if [ -n "$DOCS_CHANGED" ]; then
            echo "docs_changed=true" >> $GITHUB_OUTPUT
            echo "Documentation changes detected:"
            echo "$DOCS_CHANGED"
          else
            echo "docs_changed=false" >> $GITHUB_OUTPUT
            echo "No documentation changes detected"
          fi
      
      - name: Validate documentation requirements
        if: steps.check_source.outputs.source_changed == 'true' && steps.check_docs.outputs.docs_changed == 'false'
        run: |
          echo "⚠️  Source code changes detected without corresponding documentation updates"
          echo "Consider updating relevant files in docs/ if needed"
          exit 0  # Don't fail the build, just warn

  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # This is the crucial line that installs your project
          pip install -e .
      
      - name: Validate Python syntax
        run: |
          python -m py_compile $(find . -name "*.py" | head -20) || true
      
      - name: Check for basic import issues
        run: |
          # This now works because the package is installed
          python -c "import core_engine"

  integration-status:
    name: Integration Status Check
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security-scan, dependency-check, documentation-check, build-validation]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          echo "Lint and Format: ${{ needs.lint-and-format.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Dependency Check: ${{ needs.dependency-check.result }}"
          echo "Documentation Check: ${{ needs.documentation-check.result }}"
          echo "Build Validation: ${{ needs.build-validation.result }}"
          
          if [ "${{ needs.lint-and-format.result }}" != "success" ] || 
             [ "${{ needs.test.result }}" != "success" ] || 
             [ "${{ needs.documentation-check.result }}" != "success" ] || 
             [ "${{ needs.build-validation.result }}" != "success" ]; then
            echo "❌ One or more critical checks failed"
            exit 1
          else
            echo "✅ All critical checks passed"
          fi
